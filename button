#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>
#include <iostream>


class Button{
    public:
        sf::Vector2f position;
        sf::RectangleShape rect;
        bool is_hovering;
        int width, height;
       
        Button(){
            rect.setFillColor(sf::Color(200,200,200));
        }
           
        void create(float w, float h, float x, float y){
            width = w;
            height = h;
            position = {x,y};
            rect.setSize(sf::Vector2f(w,h));
            rect.setPosition(position);
        }
       

       
        void collidepoint(sf::Vector2f mouse){
            if (mouse.x > position.x &&
            mouse.x < (position.x + width) &&
            mouse.y > position.y &&
            mouse.y < position.y + height){
                is_hovering = true;
            }
            else{
                is_hovering = false;
            }
           
            if (is_hovering)
                rect.setFillColor(sf::Color(50,50,50));
            else
                rect.setFillColor(sf::Color(200,200,200));
        }
        
        void clicked(){
            std::cout << "button pressed" << std::endl;
        }
};

class Control{
    public:
        sf::RenderWindow window;
        sf::Clock clock;
        sf::Time frame_time = sf::seconds(1.f/60.f);
        sf::Time time = sf::Time::Zero, update_time = sf::Time::Zero;
        sf::Vector2i mouse;
        Button button;
       
        Control(){
            window.create(sf::VideoMode(600,400), "Title", sf::Style::Titlebar | sf::Style::Close);
            button.create(100,20, 100,100);
            //window.setKeyRepeatEnabled(false);
        }
       
        void time_update(){
            time = clock.restart();
            update_time += time;

            while(update_time > frame_time){
                update_time -= frame_time;

            }
        }
       
        void update(){
            time_update();
            mouse = sf::Mouse::getPosition(window);
            render();
        }
       
        void render(){
            window.clear(sf::Color::Black);
            window.draw(button.rect);
            window.display();
        }
       
        void event_handler(){
            sf::Event event;
            while(window.pollEvent(event)){
                if (event.type == sf::Event::Closed)
                    window.close();
                else if(event.type == sf::Event::MouseMoved){
                    button.collidepoint(window.mapPixelToCoords(sf::Vector2i(event.mouseMove.x,event.mouseMove.y)));
                }
                if (sf::Mouse::isButtonPressed(sf::Mouse::Left)){
                    if (button.is_hovering)
                        button.clicked();
                }
            }
        }
       
        void run(){
            while (window.isOpen()){
                event_handler();
                update();
            }
        }
};

int main(){
    Control app;
    app.run();
}
 
